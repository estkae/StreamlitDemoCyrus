# -*- coding: utf-8 -*-
"""00016 - Crash Course Part 1: Time Series Analysis with Python & Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d9yFWVkSKdtX9g-ESqE3PIbFTSC6uKa3
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import math
import statistics
import scipy.stats as stats
import re
from datetime import datetime
from datetime import date
import random
import seaborn as sns
sns.set()

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', None)
pd.set_option('display.max_colwidth', None)

our_index = pd.date_range(start='2020-12-21', periods=2500, freq='D')
df = pd.DataFrame(index = our_index)
df['Close'] = np.random.normal(loc=0.0002, scale=0.011, size=2500)
df['Close'] = np.exp(df['Close'])
df['Close'].iloc[0] = 1
df['Close'] = df['Close'].cumprod()
df['Close'].plot(figsize=(7,5), title='Our Fake Stock Price')

df[['Close']].plot(figsize=(7,5), title='Our Fake Stock Price')

df['Close'].plot(figsize=(7,5), title='Our Fake Stock Price', legend=True)

df['100MA'] = df['Close'].rolling(100).mean()
df[['Close','100MA']].plot(figsize=(7,5), title='Our Fake Stock Price')

df['100MAdist'] = -1 + (df['Close'] / df['100MA'])

f1 = plt.figure(figsize=(7,5))
ax1 = f1.add_subplot(2, 1, 1)
ax2 = f1.add_subplot(2, 1, 2)

df[['Close','100MA']].plot(title='Our Fake Stock Price', ax=ax1, logy=True)
df['100MAdist'].plot(title='Distance from MA', ax=ax2)
plt.tight_layout()

df['MAsignal'] = np.where(df['Close']>df['100MA'], 1, 0)

f1 = plt.figure(figsize=(9,6))
ax1 = f1.add_subplot(1, 1, 1)

dfFiltered = df[df['MAsignal']==1]
truedates = dfFiltered.index.tolist()

# truedates = df[df['MAsignal']==1].index.tolist() # one line method

for x in truedates:
  ax1.axvline(x, color='tab:green', alpha = 0.27, linewidth = .25, linestyle='-') 

df[['Close','100MA']].plot(title='Our Fake Stock Price', ax=ax1, logy=True)

df['SignalTrue'] = np.where(df['Close']>df['100MA'], df['Close'], np.NaN)
df['SignalFalse'] = np.where(df['Close']>df['100MA'], np.NaN, df['Close'])

f1 = plt.figure(figsize=(9,6))
ax1 = f1.add_subplot(1, 1, 1)

df[['SignalTrue','SignalFalse']].plot(title='Our Fake Stock Price', ax=ax1, logy=True)

f1 = plt.figure(figsize=(9,6))
ax1 = f1.add_subplot(1, 1, 1)

df[['SignalTrue']].plot(title='Our Fake Stock Price', ax=ax1, logy=True)
df[['SignalFalse']].plot(ax=ax1, alpha=0.50, logy=True)

our_index = pd.date_range(start='2020-12-21', periods=2500*24*2, freq='30T')
df = pd.DataFrame(index = our_index)

R_old = 0.0002
Stdev_old = 0.011

R_new = (1+R_old)**(1/48)-1
Stdev_new = (Stdev_old)*(1**0.5)*((1/48)**0.5)

df['Close'] = np.random.normal(loc=R_new, scale=Stdev_new, size=2500*24*2)
df['Close'] = np.exp(df['Close'])
df['Close'].iloc[0] = 1
df['Close'] = df['Close'].cumprod()
df['Close'].plot(figsize=(7,5))

df = df.between_time('09:30', '16:00')
df = df['Close'].resample('1D').ohlc()
df.rename(columns={'open': 'Open','high':'High','low':'Low','close':'Close'}, inplace=True)

df.head()

df['100MA'] = df['Close'].rolling(100).mean()
df['MAsignal'] = np.where(df['Close']>df['100MA'], 1, 0)

condition1 = (df['MAsignal'].shift(1)==1) & (df['MAsignal'].shift(2)==0)
condition2 = (df['MAsignal'].shift(1)==1) & (df['MAsignal'].shift(2)==1)
condition3 = (df['MAsignal'].shift(1)==0) & (df['MAsignal'].shift(2)==1)

df['PortChng'] = 0 # default setting
df['PortChng'] = np.where(condition1, -1 + df['Close']/df['Open'], df['PortChng'])
df['PortChng'] = np.where(condition2, -1 + df['Close']/df['Close'].shift(1), df['PortChng'])
df['PortChng'] = np.where(condition3, -1 + df['Open']/df['Close'].shift(1), df['PortChng'])

df['Port'] = df['PortChng'] + 1
df['Port'] = df['Port'].cumprod()

df['Port'].plot(figsize=(7,5))

f1 = plt.figure(figsize=(9,6))
ax1 = f1.add_subplot(1, 1, 1)

true_indexvals = df[condition1|condition2|condition3].index.tolist()

for x in true_indexvals:
  ax1.axvline(x, color='tab:green', alpha = 0.22, linewidth = .25, linestyle='-') 

df[['Close','Port']].plot(title='Testing the 100MA Strategy', ax=ax1, logy=True)
ax1.legend(loc='upper left')

BidAskPct = 4/(100*100) # (ask-bid)/ask = 4 basis points
list_cols = ['Open','Close']

for i in list_cols:
  df[i+'Ask'] = (2*df[i])/(2-BidAskPct)
  df[i+'Bid'] = (2*df[i]) - (2*df[i])/(2-BidAskPct)

import re
df.filter(regex='Open|Close').head()

condition1 = (df['MAsignal'].shift(1)==1) & (df['MAsignal'].shift(2)==0)
condition2 = (df['MAsignal'].shift(1)==1) & (df['MAsignal'].shift(2)==1)
condition3 = (df['MAsignal'].shift(1)==0) & (df['MAsignal'].shift(2)==1)

df['PortChng'] = 0 # default setting
df['PortChng'] = np.where(condition1, -1 + df['Close']/df['OpenAsk'], df['PortChng'])
df['PortChng'] = np.where(condition2, -1 + df['Close']/df['Close'].shift(1), df['PortChng'])
df['PortChng'] = np.where(condition3, -1 + df['OpenBid']/df['Close'].shift(1), df['PortChng'])

df['Port'] = df['PortChng'] + 1
df['Port'] = df['Port'].cumprod()

f1 = plt.figure(figsize=(9,6))
ax1 = f1.add_subplot(1, 1, 1)

true_indexvals = df[condition1|condition2|condition3].index.tolist()

for x in true_indexvals:
  ax1.axvline(x, color='tab:green', alpha = 0.22, linewidth = .25, linestyle='-') 

df[['Close','Port']].plot(title='Testing the 100MA Strategy', ax=ax1, logy=True)
ax1.legend(loc='upper left')